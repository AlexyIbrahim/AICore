---
- hosts: localhost
  vars:
    repo_url: "git@gitlab.com:alexyib/aicore.git"
    stop_if_no_changes: false  # Set to false to continue even when no changes

  tasks:
    - name: Check the status of the working tree
      shell: git status --porcelain
      register: git_status

    - name: Stop playbook if there are no changes to commit
      meta: end_play
      when: git_status.stdout == "" and stop_if_no_changes

    - name: Get current version from .bumpversion.cfg
      shell: grep "^current_version" .bumpversion.cfg | cut -d'=' -f2 | tr -d ' '
      register: current_version_output

    - name: Set current version
      set_fact:
        current_version: "{{ current_version_output.stdout }}"

    - name: Log current version
      debug:
        msg: "Current version: {{ current_version }}"

    - name: Run bumpversion patch
      shell: bumpversion patch
      register: bumpversion_output

    - name: Get new version from .bumpversion.cfg
      shell: grep "^current_version" .bumpversion.cfg | cut -d'=' -f2 | tr -d ' '
      register: new_version_output

    - name: Set new version
      set_fact:
        version: "{{ new_version_output.stdout }}"

    - name: Log new version
      debug:
        msg: "New version: {{ version }}"

    - name: Generate changelog
      shell: git-changelog -n {{ version }} -f changelog.md --repo_url {{ repo_url }}
      register: changelog_output
      ignore_errors: yes

    - name: Stage the changelog
      shell: git add changelog.md
      when: changelog_output.rc == 0

    - name: Check if tag already exists
      shell: git tag -l "{{ version }}"
      register: tag_exists

    - name: Check if tag already exists
      debug:
        var: tag_exists.stdout

    - name: Push the commit to origin-glab
      shell: git push origin-glab main
      when: git_status.stdout != "" or not stop_if_no_changes
      ignore_errors: yes

    - name: Push the commit to origin-gh
      shell: git push origin-gh main
      when: git_status.stdout != "" or not stop_if_no_changes
      ignore_errors: yes

    - name: Check if glab is installed
      command: glab --version
      register: glab_installed
      ignore_errors: yes

    - name: Display warning if glab is not installed
      debug:
        msg: "Warning: glab is not installed. Skipping GitLab release creation."
      when: glab_installed.rc != 0

    - name: Create a release on GitLab
      shell: glab release create {{ version }} -n "Release {{ version }}" -F changelog.md
      when: glab_installed.rc == 0 and changelog_output.rc == 0
      ignore_errors: yes

    - name: Check if gh is installed
      command: gh --version
      register: gh_installed
      ignore_errors: yes

    - name: Display warning if gh is not installed
      debug:
        msg: "Warning: gh is not installed. Skipping GitHub release creation."
      when: gh_installed.rc != 0

    - name: Ensure tag is available on GitHub
      shell: git ls-remote --tags origin-gh | grep "refs/tags/{{ version }}"
      register: tag_on_github

    - name: Create a release on GitHub
      shell: gh release create "{{ version }}" --title "Release {{ version }}" --generate-notes # -F changelog.md
      when: gh_installed.rc == 0 and changelog_output.rc == 0 and tag_on_github.rc == 0
      ignore_errors: yes
